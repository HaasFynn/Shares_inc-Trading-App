Index: src/test/java/functional/InputHandlerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package functional;\r\n\r\nimport com.sun.tools.javac.Main;\r\nimport creators.ShareCreator;\r\nimport dao.PortfolioDaoImpl;\r\nimport dao.ShareDaoImpl;\r\nimport dao.UserDaoImpl;\r\nimport entities.User;\r\nimport jakarta.persistence.EntityManager;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass InputHandlerTest {\r\n    EntityManager entityManager = EntityManagement.createEntityManagerFactory().createEntityManager();\r\n    UserDaoImpl userDao = new UserDaoImpl(entityManager);\r\n\r\n    @Test\r\n    void doesLoginWork() {\r\n        createTestAccount();\r\n        User user = new User();\r\n        user.setUsername(\"test\");\r\n        user.setEmail(\"john.doe@gmail.com\");\r\n        user.setPassword(\"1234\");\r\n        assertEquals(user.getUsername().toLowerCase(), userDao.getByUsername(\"Test\").getUsername().toLowerCase());\r\n    }\r\n\r\n    void createTestAccount() {\r\n        User user = new User();\r\n        user.setUsername(\"Test\");\r\n        user.setEmail(\"john.doe@gmail.com\");\r\n        user.setPassword(\"1234\");\r\n        userDao.add(user);\r\n    }\r\n\r\n    @Test\r\n    void doSharesGetAddedEveryTime() {\r\n        EntityManager entityManager = EntityManagement.createEntityManagerFactory().createEntityManager();\r\n        ShareDaoImpl shareDao = new ShareDaoImpl(entityManager);\r\n\r\n\r\n        assertThrows(Exception.class, () -> {\r\n            for (int i = 1; i <= 10; i++) {\r\n                TimeUnit.SECONDS.sleep(3);\r\n                shareDao.addAll(ShareCreator.createNewShares(100));\r\n                System.out.println(\"Didnt Work this time. Attempt number: \" + i);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/functional/InputHandlerTest.java b/src/test/java/functional/InputHandlerTest.java
--- a/src/test/java/functional/InputHandlerTest.java	
+++ b/src/test/java/functional/InputHandlerTest.java	
@@ -1,14 +1,13 @@
 package functional;
 
-import com.sun.tools.javac.Main;
-import creators.ShareCreator;
-import dao.PortfolioDaoImpl;
-import dao.ShareDaoImpl;
-import dao.UserDaoImpl;
-import entities.User;
+import backend.ShareCreator;
+import backend.dao.ShareDaoImpl;
+import backend.dao.UserDaoImpl;
+import backend.entities.User;
 import jakarta.persistence.EntityManager;
 import org.junit.jupiter.api.Test;
 
+import backend.functional.EntityManagement;
 import java.util.concurrent.TimeUnit;
 
 import static org.junit.jupiter.api.Assertions.*;
Index: src/main/java/LanguagePack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/LanguagePack.java b/src/main/java/LanguagePack.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/LanguagePack.java	
@@ -0,0 +1,49 @@
+import javafx.beans.binding.Bindings;
+import javafx.beans.binding.StringBinding;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+
+import java.text.MessageFormat;
+import java.util.*;
+
+import static javax.swing.JComponent.getDefaultLocale;
+
+public class LanguagePack {
+
+    private static final ObjectProperty<Locale> locale;
+
+    static {
+        locale = new SimpleObjectProperty<>(getDefaultLocale());
+        locale.addListener((observable, oldValue, newValue) -> Locale.setDefault(newValue));
+    }
+
+    public static StringBinding createStringBinding(final String key, Object... args) {
+        return Bindings.createStringBinding(() -> get(key, args), locale);
+    }
+
+    public static String get(final String key, final Object... args) {
+        ResourceBundle bundle = ResourceBundle.getBundle("locale.language", getLocale());
+        return MessageFormat.format(bundle.getString(key), args);
+    }
+
+    public static void setLocale(Locale locale) {
+        localeProperty().set(locale);
+        Locale.setDefault(locale);
+    }
+
+    public static ObjectProperty<Locale> localeProperty() {
+        return locale;
+    }
+
+    public static Locale getLocale() {
+        return locale.get();
+    }
+
+    public static List<Locale> getSupportedLocales() {
+        return new ArrayList<>(Arrays.asList(Locale.GERMAN, Locale.ENGLISH));
+    }
+
+    public static List<String> getSupportedLocaleStrings() {
+        return new ArrayList<>(Arrays.asList(Locale.GERMAN.toString(), Locale.ENGLISH.toString()));
+    }
+}
Index: src/main/java/javafx/ScreenBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/javafx/ScreenBuilder.java b/src/main/java/javafx/ScreenBuilder.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/javafx/ScreenBuilder.java	
@@ -0,0 +1,21 @@
+package javafx;
+
+import javafx.scene.Node;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.Region;
+import javafx.scene.text.Text;
+import javafx.util.Builder;
+
+public class ScreenBuilder implements Builder<Region> {
+
+    @Override
+    public Region build() {
+        BorderPane results = new BorderPane();
+        results.setTop(createTop());
+        return results;
+    }
+
+    private Node createTop() {
+        return new Text("This is the Screen Title");
+    }
+}
Index: src/main/java/creators/ShareCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/creators/ShareCreator.java b/src/main/java/ShareCreator.java
rename from src/main/java/creators/ShareCreator.java
rename to src/main/java/ShareCreator.java
--- a/src/main/java/creators/ShareCreator.java	
+++ b/src/main/java/ShareCreator.java	
@@ -1,6 +1,6 @@
-package creators;
+package backend;
 
-import entities.Share;
+import backend.entities.Share;
 
 import java.io.*;
 import java.net.HttpURLConnection;
Index: src/main/java/entities/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n/**\r\n * The type User.\r\n */\r\n@Getter\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User {\r\n    @Column(name = \"id\")\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    public long Id;\r\n\r\n    @Column(name = \"username\")\r\n    @Setter\r\n    private String username;\r\n\r\n    @Column(name = \"firstname\")\r\n    @Setter\r\n    private String firstname;\r\n\r\n    @Column(name = \"lastname\")\r\n    @Setter\r\n    private String lastname;\r\n\r\n    @Column(name = \"email\")\r\n    @Setter\r\n    private String email;\r\n\r\n    @Column(name = \"password\")\r\n    @Setter\r\n    private String password;\r\n\r\n    @Column(name = \"accountBalance\")\r\n    @Setter\r\n    private double accountBalance;\r\n\r\n    @Column(name = \"creationDate\")\r\n    @Setter\r\n    private LocalDateTime date;\r\n\r\n    public User() {\r\n        this.accountBalance = 1000.0;\r\n        this.date = LocalDateTime.now();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/entities/User.java b/src/main/java/entities/User.java
--- a/src/main/java/entities/User.java	
+++ b/src/main/java/entities/User.java	
@@ -1,4 +1,4 @@
-package entities;
+package backend.entities;
 
 import jakarta.persistence.*;
 import lombok.Getter;
Index: src/main/java/functional/EntityManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package functional;\r\n\r\nimport entities.Portfolio;\r\nimport entities.Share;\r\nimport entities.User;\r\n\r\nimport jakarta.persistence.EntityManagerFactory;\r\nimport org.hibernate.boot.MetadataSources;\r\nimport org.hibernate.boot.registry.StandardServiceRegistry;\r\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\r\n\r\nimport static java.time.LocalDateTime.now;\r\n\r\n/**\r\n * The type Session.\r\n */\r\npublic class EntityManagement {\r\n\r\n    private static EntityManagerFactory entityManagerFactory = null;\r\n\r\n    public static EntityManagerFactory createEntityManagerFactory() {\r\n        if (entityManagerFactory != null) {\r\n            return entityManagerFactory;\r\n        }\r\n        final StandardServiceRegistry registry =\r\n                new StandardServiceRegistryBuilder()\r\n                        .loadProperties(\"hibernate.properties\").build();\r\n        try {\r\n            entityManagerFactory =\r\n                    new MetadataSources(registry)\r\n                            .addAnnotatedClass(Share.class)\r\n                            .addAnnotatedClass(User.class)\r\n                            .addAnnotatedClass(Portfolio.class)\r\n                            .buildMetadata()\r\n                            .buildSessionFactory();\r\n        } catch (Exception e) {\r\n            StandardServiceRegistryBuilder.destroy(registry);\r\n        }\r\n        return entityManagerFactory;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/functional/EntityManagement.java b/src/main/java/functional/EntityManagement.java
--- a/src/main/java/functional/EntityManagement.java	
+++ b/src/main/java/functional/EntityManagement.java	
@@ -1,8 +1,8 @@
-package functional;
+package backend.functional;
 
-import entities.Portfolio;
-import entities.Share;
-import entities.User;
+import backend.entities.Portfolio;
+import backend.entities.Share;
+import backend.entities.User;
 
 import jakarta.persistence.EntityManagerFactory;
 import org.hibernate.boot.MetadataSources;
Index: src/main/java/archive/UserManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package archive;\r\n\r\nimport entities.User;\r\nimport jakarta.persistence.NoResultException;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.Transaction;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * The type User manager.\r\n */\r\npublic class UserManager {\r\n    private final SessionFactory sessionFactory;\r\n\r\n\r\n    /**\r\n     * Instantiates a new User manager.\r\n     *\r\n     * @param sessionFactory the session factory\r\n     */\r\n    public UserManager(SessionFactory sessionFactory) {\r\n        this.sessionFactory = sessionFactory;\r\n    }\r\n\r\n    /**\r\n     * Add user boolean.\r\n     *\r\n     * @param user the user\r\n     * @return <p>if action succeeded</p>\r\n     */\r\n    public boolean add(User user) {\r\n\r\n        Transaction tx = null;\r\n        try (Session session = sessionFactory.openSession()) {\r\n            if (userExists(user.getUsername())) {\r\n                tx = session.beginTransaction();\r\n                tx.begin();\r\n                session.persist(user);\r\n                tx.commit();\r\n            }\r\n        } catch (Exception e) {\r\n            if (tx != null) {\r\n                tx.rollback();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean userExists(String username) {\r\n        User user = getUserByUsername(username);\r\n        return Objects.equals(user.getUsername(), \"\") || Objects.equals(user.getEmail(), \"\");\r\n    }\r\n\r\n    public User getUserWithPass(String username, String pass) {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            return session\r\n                    .createQuery(\"from User u where u.username = :username and u.password = :password\", User.class)\r\n                    .setParameter(\"username\", username)\r\n                    .setParameter(\"password\", pass).getSingleResultOrNull();\r\n        } catch (NoResultException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public User getUserByUsername(String username) {\r\n        try (Session session = sessionFactory.openSession()) {\r\n            return session\r\n                    .createQuery(\"from User u where u.username = :username\", User.class)\r\n                    .setParameter(\"username\", username).getSingleResultOrNull();\r\n        } catch (NoResultException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save boolean.\r\n     *\r\n     * @param user the user\r\n     * @return <p>if action succeeded</p>\r\n     */\r\n    public boolean save(User user) {\r\n        sessionFactory.inTransaction(session -> {\r\n            session.merge(user);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Delete boolean.\r\n     *\r\n     * @param username the username\r\n     * @param password the password\r\n     * @return <p>if action succeeded</p>\r\n     */\r\n    public boolean delete(String username, String password) {\r\n        Transaction tx = null;\r\n        try (Session session = sessionFactory.openSession()) {\r\n            tx = session.beginTransaction();\r\n            tx.begin();\r\n            session\r\n                    .createMutationQuery(\"delete from User u where u.username = :username and u.password = :password\")\r\n                    .setParameter(\"username\", username)\r\n                    .setParameter(\"password\", password).executeUpdate();\r\n            tx.commit();\r\n        } catch (Exception e) {\r\n            if (tx != null) {\r\n                tx.rollback();\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/archive/UserManager.java b/src/main/java/archive/UserManager.java
--- a/src/main/java/archive/UserManager.java	
+++ b/src/main/java/archive/UserManager.java	
@@ -1,6 +1,6 @@
-package archive;
+package backend.archive;
 
-import entities.User;
+import backend.entities.User;
 import jakarta.persistence.NoResultException;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
